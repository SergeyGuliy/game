import axios from "axios";

const NEXT_PUBLIC_API_URL = process.env.NEXT_PUBLIC_API_URL;
const NEXT_PUBLIC_AUTHEMBED_URL = process.env.NEXT_PUBLIC_AUTHEMBED_URL;

export const lazyRegisterUser = (data) => {
  const url = `${NEXT_PUBLIC_AUTHEMBED_URL}/api/auth/register-with-lazy-email-verification`;

  return axios
    .post(url, {
      email: "test100@tester.ru",
      name: "Test",
      password: "test",
      metadata: {
        phone: "+7 555 777-77-77",
      },
    })
    .then((res) => {
      if (res.status > 300) {
        throw new Error("Ошибка сети");
      }
      return res.data;
    });
};

export const autogeneratePasswrodRegister = (data) => {
  const { email, phone } = data;

  const url = `${NEXT_PUBLIC_AUTHEMBED_URL}/api/auth/register-with-autogenerated-password-sent-to-mail`;

  return axios
    .post(url, {
      email: email,
      name: "",
      metadata: {
        phone: phone,
      },
    })
    .then((res) => {
      if (res.status === 409) {
        return { error: "EMAIL_TAKEN" };
      }
      return res.data;
    })
    .catch((error) => {
      return { error: "EMAIL_TAKEN" };
    });
};

export const registerUser = (data) => {
  const url = `${NEXT_PUBLIC_AUTHEMBED_URL}/api/auth/register-with-email-verification`;

  return axios
    .post(url, {
      email: "tedsdat9s@test.ru",
      password: "test",
      name: "Tester7",
      metadata: {
        phone: "+7 (197) 777-78-75",
      },
    })
    .then((res) => {
      if (res.status > 300) {
        throw new Error("Ошибка сети");
      }
      return res.data;
    });
};

export const authUser = (data) => {
  const url = `${NEXT_PUBLIC_AUTHEMBED_URL}/api/login`;

  const { email, password } = data;

  return axios
    .post(url, {
      email,
      password,
    })
    .then((res) => {
      return res.data;
    })
    .catch((error) => {
      return "error";
    });
};

export const addPoint = (data) => {
  const { points, token } = data;

  return axios
    .post(
      `${NEXT_PUBLIC_API_URL}/user/points`,
      {
        points,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )
    .then((res) => {
      return res.data;
    })
    .catch((error) => {
      throw new Error(error);
    });
};

export const getRank = (data) => {
  const { token } = data;
  return axios
    .get(`${NEXT_PUBLIC_API_URL}/user/rank`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      return res.data;
    })
    .catch((error) => {
      throw new Error(error);
    });
};

export const getPoints = (state) => {
  const { token } = state;

  return axios
    .get(`${NEXT_PUBLIC_API_URL}/user/points`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      return res.data;
    })
    .catch((error) => {
      throw new Error(error);
    });
};

export const getTopUsers = (data) => {
  const { token } = data;

  return axios
    .get(`${NEXT_PUBLIC_API_URL}/user/top100`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      if (res.status < 300) {
        return res.data;
      }
    })
    .catch((error) => {
      throw new Error(error);
    });
};

export const restoreEmail = (data) => {
  const { email } = data;
  const url = `${NEXT_PUBLIC_AUTHEMBED_URL}/api/auth/update-autogenerated-password`;
  return axios
    .post(url, {
      email,
    })
    .then((res) => {
      if (res.status > 200 && res.status < 300) {
        return { success: true };
      } else {
        return { success: false };
      }
    })
    .catch((error) => {
      return { success: false };
    });
};

export const sendMail = (data) => {
  const { token } = data;
  const url = `${NEXT_PUBLIC_API_URL}/user/sendSecondPromo`;
  return axios
    .get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      if (res.status >= 200 && res.status < 300) {
        return { success: true };
      } else {
        return { success: false };
      }
    })
    .catch((error) => {
      return { success: false };
    });
};

export const getCountGame = (data) => {
  const { token } = data;
  const url = `${NEXT_PUBLIC_API_URL}/user`;
  return axios
    .get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      if (res.status >= 200 && res.status < 300) {
        return res.data;
      } else {
        throw Error;
      }
    })
    .catch((error) => {
      return { success: false };
    });
};

export const checkRewardTaken = (data) => {
  const { token } = data;
  const url = `${NEXT_PUBLIC_API_URL}/user`;
  return axios
    .get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    .then((res) => {
      if (res.status >= 200 && res.status < 300) {
        return res.data;
      } else {
        throw Error;
      }
    })
    .catch((error) => {
      return { success: false };
    });
};
